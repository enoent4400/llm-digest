'use client'

import { DeleteDigestModal } from '@/components/digest/DeleteDigestModal';
import { RegenerateDigestModal } from '@/components/digest/RegenerateDigestModal';
import { Button } from '@/components/ui/button';
import { AppHeader } from '@/components/ui/app-header';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Icon } from '@/components/ui/icon';
import { Settings, FileText, RotateCcw, Trash2, BarChart3, Construction } from 'lucide-react';
import { ExecutiveSummary } from '@/components/visualizations/executive-summary';
import { SimpleCodeBlocksDigest } from '@/components/visualizations/code-blocks/SimpleCodeBlocksDigest';
import { ActionPlanBoard } from '@/components/visualizations/action-plan';
import { FAQAccordion } from '@/components/visualizations/faq';
import { MindMapFlow } from '@/components/visualizations/mind-map';
import Link from 'next/link';
import { useState } from 'react';
import type { KeyInsight, PracticalTakeaway, ShareableQuote } from '@/types/digest';
import { DigestRecord } from '@/types/database';

interface DigestPageProps {
  initialDigest: DigestRecord;
}
// Export utility functions
function generateMarkdownExport(digest: DigestRecord): string {
  let markdown = `# ${digest.title}\n\n`;

  if (digest.processed_content?.summary) {
    markdown += `## Summary\n\n${digest.processed_content.summary}\n\n`;
  }

  if (digest.processed_content?.keyInsights?.length > 0) {
    markdown += `## Key Insights\n\n`;
    digest.processed_content.keyInsights.forEach((insight: KeyInsight, index: number) => {
      markdown += `${index + 1}. **${insight.insight}** (${insight.category})\n`;
      if (insight.applicability) {
        markdown += `   - ${insight.applicability}\n`;
      }
      markdown += `\n`;
    });
  }

  if (digest.processed_content?.practicalTakeaways?.length > 0) {
    markdown += `## Action Items\n\n`;
    digest.processed_content.practicalTakeaways.forEach((takeaway: PracticalTakeaway, index: number) => {
      markdown += `${index + 1}. ${takeaway.action} *(${takeaway.timeframe}, ${takeaway.difficulty})*\n`;
    });
    markdown += `\n`;
  }

  if (digest.processed_content?.shareableQuotes?.length > 0) {
    markdown += `## Key Quotes\n\n`;
    digest.processed_content.shareableQuotes.forEach((quote: ShareableQuote) => {
      markdown += `> "${quote.text}"\n> \n> — ${quote.author}\n\n`;
    });
  }

  markdown += `---\n`;
  markdown += `*Generated by LLMDigest • ${new Date(digest.created).toLocaleDateString()}*\n`;

  return markdown;
}

function downloadFile(content: string, filename: string, mimeType: string) {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

export default function DigestPage({ initialDigest }: DigestPageProps) {
  const [digest,] = useState<DigestRecord>(initialDigest);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [regenerateModalOpen, setRegenerateModalOpen] = useState(false);

  return (
    <div className="min-h-screen bg-background">
      <AppHeader maxWidth="max-w-6xl" />

      {/* Page Header */}
      <div className="bg-bg-secondary">
        <div className="max-w-6xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-semibold text-gray-100">
                {digest.title}
              </h2>
              <p className="text-sm text-gray-400">
                Created {new Date(digest.created).toLocaleDateString()}
              </p>
            </div>

            {/* Action Buttons */}
            <div className="flex items-center gap-3">
              {/* Actions Menu */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="default" size="sm">
                    <Icon icon={Settings} size={16} className="text-white mr-1" />
                    Actions
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => {
                      const markdown = generateMarkdownExport(digest);
                      downloadFile(markdown, `${digest.title || 'digest'}.md`, 'text/markdown');
                    }}
                  >
                    <Icon icon={FileText} size={16} strokeWidth={2.5} className="mr-2" />
                    Export
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => setRegenerateModalOpen(true)}
                  >
                    <Icon icon={RotateCcw} size={16} strokeWidth={2.5} className="mr-2" />
                    Regenerate
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => setDeleteModalOpen(true)}
                    className="text-red-600 focus:text-red-600"
                  >
                    <Icon icon={Trash2} size={16} strokeWidth={2.5} className="mr-2 text-red-600" />
                    Delete
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              <Link href="/dashboard">
                <Button variant="secondary" size="sm">
                  ← Back
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>


      {/* Content */}
      <div className="max-w-6xl mx-auto px-6 py-8">
        {/* Metadata Card */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="text-xl font-semibold text-gray-100 flex items-center gap-2">
              <Icon icon={BarChart3} size={24} strokeWidth={3} />
              Digest Information
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <p className="text-sm font-medium text-gray-400 mb-1">
                  Source Platform
                </p>
                <p className="text-lg font-medium text-gray-100 capitalize">
                  {digest.source_platform}
                </p>
              </div>

              <div>
                <p className="text-sm font-medium text-gray-400 mb-1">
                  Model Used
                </p>
                <p className="text-lg font-medium text-gray-100">
                  {digest.model_used}
                </p>
              </div>

              <div>
                <p className="text-sm font-medium text-gray-400 mb-1">
                  Processing Cost
                </p>
                <p className="text-lg font-medium text-gray-100">
                  ${digest.estimated_cost?.toFixed(4) || '0.0000'}
                </p>
              </div>
            </div>

            {digest.source_url && (
              <div className="mt-6 pt-6 border-t border-gray-700">
                <p className="text-sm font-medium text-gray-400 mb-2">
                  Original Conversation
                </p>
                <a
                  href={digest.source_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-accent-primary hover:text-accent-primary/80 underline"
                >
                  View Source →
                </a>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Digest Content */}
        {digest.format === 'executive-summary' && digest.processed_content && (
          <ExecutiveSummary
            databaseDigest={digest}
            showMetadata={true}
          />
        )}

        {digest.format === 'code-organization' && digest.processed_content && (
          <SimpleCodeBlocksDigest
            databaseDigest={digest}
            showMetadata={true}
          />
        )}

        {digest.format === 'action-plan' && digest.processed_content && (
          <ActionPlanBoard
            databaseDigest={digest}
            showMetadata={true}
          />
        )}

        {digest.format === 'faq' && digest.processed_content && (
          <FAQAccordion
            databaseDigest={digest}
            showMetadata={true}
          />
        )}

        {digest.format === 'mind-map' && digest.processed_content && (
          <MindMapFlow
            databaseDigest={digest}
          />
        )}

        {/* Future: Add other visualization types */}
        {!['executive-summary', 'code-organization', 'action-plan', 'faq', 'mind-map'].includes(digest.format) && (
          <Card>
            <CardContent className="text-center py-12">
              <div className="w-24 h-24 bg-gray-800 border border-gray-700 mx-auto mb-4 flex items-center justify-center rounded-lg">
                <Icon icon={Construction} size={48} strokeWidth={3} className="text-gray-500" />
              </div>
              <p className="text-lg font-semibold text-gray-400 mb-2">
                Visualization Coming Soon
              </p>
              <p className="text-sm text-gray-500 max-w-md mx-auto">
                This digest format ({digest.format}) will be supported in a future update.
              </p>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Delete Modal */}
      <DeleteDigestModal
        isOpen={deleteModalOpen}
        onClose={() => setDeleteModalOpen(false)}
        digest={digest}
        redirectToDashboard={true}
      />

      {/* Regenerate Modal */}
      <RegenerateDigestModal
        isOpen={regenerateModalOpen}
        onClose={() => setRegenerateModalOpen(false)}
        digest={digest}
        onRegenerateSuccess={() => {
          // Refresh the page to show updated content
          window.location.reload()
        }}
      />
    </div>
  );
}
